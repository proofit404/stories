[tox]
envlist =
  py{36,37,38},
  doctest,
  coverage,
  precommit,
  pyupgrade,
  reorderpythonimports,
  docformatter,
  black,
  prettier,
  flake8,
  bandit,
  importlint,
  mkdocs,
  remarklint,
  eslint,
  yamllint,
  commitlint
isolated_build = true

[testenv]
deps =
  Cerberus
  coverage
  Django
  django-debug-toolbar
  Flask
  flask-debugtoolbar
  marshmallow
  pydantic
  pytest
  pytest-randomly
  pytest-timeout
  PyYAML
  tomlkit
commands =
  pip install ./tests/helpers/.
  coverage run -m pytest {env:CI_PYTEST_FLAGS:} {posargs}

[testenv:doctest]
basepython = python3.8
deps =
  coverage
  Django
  django-debug-toolbar
  django-filter
  djangorestframework
  Flask
  flask-debugtoolbar
  PyYAML
  raven
commands =
  pip install ./tests/helpers/.
  coverage run -m mddoctest

[testenv:coverage]
basepython = python3.8
skip_install = true
deps =
  coverage
commands =
  coverage combine
  coverage report --fail-under 97
depends =
  py{36,37,38},
  doctest

[testenv:precommit]
basepython = python3.8
skip_install = true
deps =
  pre-commit
commands =
  pre-commit run --all-files --show-diff-on-failure

[testenv:pyupgrade]
basepython = python3.8
skip_install = true
deps =
  pyupgrade
commands =
  bash -c 'git ls-files | grep \\.py$ | xargs pyupgrade --py36-plus'
whitelist_externals =
  bash

[testenv:reorderpythonimports]
basepython = python3.8
skip_install = true
deps =
  reorder-python-imports
commands =
  bash -c 'git ls-files | grep \\.py$ | xargs reorder-python-imports --application-directories=.:src:tests/helpers'
whitelist_externals =
  bash

[testenv:docformatter]
basepython = python3.8
skip_install = true
deps =
  docformatter
commands =
  bash -c 'git ls-files | grep \\.py$ | xargs docformatter --wrap-summaries 88 --wrap-descriptions 88 --blank {posargs:--check}'
whitelist_externals =
  bash

[testenv:black]
basepython = python3.8
skip_install = true
deps =
  black
commands =
  black {posargs:--check} .

[testenv:prettier]
basepython = python3.8
skip_install = true
install_command = npm -C {envdir} install --no-save --no-package-lock {packages}
setenv =
  NODE_PATH = {envdir}/node_modules
deps =
  prettier
commands =
  {envdir}/node_modules/.bin/prettier --prose-wrap=always {posargs:--check} .
whitelist_externals =
  npm

[testenv:flake8]
basepython = python3.8
skip_install = true
deps =
  flake8
  flake8-2020
  flake8-blind-except
  flake8-bugbear
  flake8-builtins
  flake8-comprehensions
  flake8-executable
  flake8-mutable
  flake8-print
  flake8-pytest
  flake8-pytest-style
  flake8-tidy-imports
  yesqa
commands =
  flake8 -j auto {posargs}
  bash -c 'git ls-files | grep \\.py$ | xargs yesqa'
whitelist_externals =
  bash

[testenv:bandit]
basepython = python3.8
skip_install = true
deps =
  bandit
commands =
  bandit -r src/

[testenv:importlint]
basepython = python3.8
deps =
  import-linter
commands =
  lint-imports

[testenv:mkdocs]
basepython = python3.8
skip_install = true
deps =
  mkdocs
  mkdocs-material
commands =
  mkdocs {posargs:build}

[testenv:remarklint]
basepython = python3.8
skip_install = true
install_command = npm -C {envdir} install --no-save --no-package-lock {packages}
setenv =
  NODE_PATH = {envdir}/node_modules
deps =
  remark-cli
  remark-lint
  remark-preset-lint-recommended
commands =
  {envdir}/node_modules/.bin/remark --frail .
whitelist_externals =
  npm

[testenv:eslint]
basepython = python3.8
skip_install = true
install_command = npm -C {envdir} install --no-save --no-package-lock {packages}
setenv =
  NODE_PATH = {envdir}/node_modules
deps =
  eslint
  eslint-plugin-json
commands =
  {envdir}/node_modules/.bin/eslint --ext .js,.json --ignore-path .gitignore .
whitelist_externals =
  npm

[testenv:yamllint]
basepython = python3.8
skip_install = true
deps =
  yamllint
commands =
  yamllint --strict .

[testenv:commitlint]
basepython = python3.8
skip_install = true
install_command = npm -C {envdir} install --no-save --no-package-lock {packages}
setenv =
  NODE_PATH = {envdir}/node_modules
deps =
  @commitlint/cli
  @commitlint/config-conventional
commands =
  {envdir}/node_modules/.bin/commitlint --from master
whitelist_externals =
  npm
